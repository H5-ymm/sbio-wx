<style lang="less">
  @import "/../style/dialog.less";
  .sbio-dialog__container {
    position: fixed;
    bottom: 25%;
    width: 646rpx;
    height: 924rpx;
    left: 7%;
    background: #ffffff;
    z-index: 12;
    border-radius: 30rpx;
  }
  .box {
    height: 100%;
    width: 100%;
    text-align: center;
    overflow: hidden;
    .bg {
      height: 100%;
      width: 100%;
    }
  }
  .box-btn {
    margin: 0 auto;
    width: 50%;
    position: absolute;
    left: 25%;
    bottom: 8%;
    z-index: 222;
    .btn {
      width: 100%;
      height: 80rpx;
      border-radius: 43rpx;
      color: #ffffff;
      background: #f56666;
      font-size: 30rpx;
    }
  }
</style>
<template>
  <view class="sbio-dialog {{!isShow?'sbio-dialog--show':''}}" animation="{{animationData}}" hidden="{{isShow}}">
    <view class="sbio-dialog__mask" />
    <view class="sbio-dialog__container">
      <view class="box">
        <image src="https://api.s-sbio.com/images/popup.png" class="bg"></image>
        <view class="box-btn">
          <button class="weui-flex__item btn weui-flex center" lang="zh_CN" open-type="getUserInfo" @getuserinfo="bindgetuserinfo">绑定微信</button>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import { $http } from '@/tool/http.js'
import { wxShowModal, wxToast } from '@/tool/util'
export default class popup extends wepy.component {
  props = {
    isShow: {
      type: Boolean,
      default: true
    }
  }
  data = {
    animationData: {}
  }
  watch = {
    isShow(val) {
      if (val) {
        this.setAnimation()
      }
    }
  }
  decryptData(params) {
    $http('user/api/wechat/decryptData', params).then(res => {
      if (res.code == 0) {
        wx.setStorageSync('sessionId', res.data.sessionId)
        wx.setStorageSync('authFlag', true)
        this.$emit('bindWx', res.data.sessionId)
      }
    }).catch(err => {
      wx.setStorageSync('authFlag', true)
    })
  }
  setAnimation() {
    var animation = wx.createAnimation({
      duration: 200,  //动画时长
      timingFunction: "linear", //线性
      delay: 0  //0则不延迟
    })
    this.animation = animation;
    // 第3步：执行第一组动画
    animation.opacity(0).translateY('400%').step();
    // 第4步：导出动画对象赋给数据对象储存
    this.animationData = animation.export()
    // 第5步：设置定时器到指定时候后，执行第二组动画
    setTimeout(function () {
      this.animationData.opacity(1).translateY(0).step();
    }.bind(this), 200)
  }
  methods = {
    bindgetuserinfo(e) {
      if (e.detail.errMsg.indexOf('getUserInfo:fail') > -1) {
        wxToast('拒绝授权，小程序功能将无法使用！')
      } else {
        let params = {
          sessionId: wx.getStorageSync('sessionId'),
          encryptedData: e.detail.encryptedData,
          iv: e.detail.iv
        }
        this.decryptData(params)
      }
    }
  }
}
</script>