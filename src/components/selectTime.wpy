<style lang="less">
  .selectAddress {
    width: 100%;
    height: 100%;
    overflow: hidden;
    position: absolute;
    bottom: 0;
    z-index: 20;
    .selectAddress-content {
      height: 60%;
      background: #ffffff;
      position: absolute;
      bottom: 0;
      z-index: 30;
      left: 0;
      width: 100%;
      animation: find .3s linear;
      .box {
        height: 100%;
        width: 100%;
        text-align: center;
        font-size: 36rpx;
        overflow: hidden;
        color: #808080;
        >.box-content {
          height: calc(100% - 60px);
          > .weui-flex__auto {
            height: 100%;
          }
          
        }
      }
      .city-title {
        color: #000000;
        font-size: 36rpx;
        padding: 40rpx 0 20rpx;
      }
      .city-subTitle {
        border-top: 1px solid #D8D8D8;
        border-bottom: 1px solid #D8D8D8;
        padding: 20rpx 0;
      }
      .box-content {
        overflow: hidden;
      }
      .time-col-1 {
        background: #f3f3f3;
        color: #666666;
        text-align: center;
        line-height: 60rpx;
        overflow: hidden;
        width: 25%;
        .item {
          height:88rpx;
          margin: 33rpx;
          &.item-active {
            background:#E0E0E0;
            border-radius:16rpx;
            color: #000000;
          }
        }
      }
      .time-col-2 {
        padding-top: 45rpx;
        height: 100%; 
        .city-list {
          height: 90%;
        }
      }
      .city-list {
        padding: 45rpx 0 20rpx;
        overflow: auto;
        line-height: 80rpx;
        .active {
          color: #F36681;
        }
      }
    }
    .box-btn {
      margin: 20rpx 30rpx;
      .btn {
        height:80rpx;
        border-radius:40rpx;
        border:1px solid #979797;
        margin: 0 30rpx;
        color: #666666;
        background: #ffffff;
        font-size: 30rpx;
        &.btn1 {
          color: #ffffff;
          background: #F36681;
          border: 1px solid #F36681;
        }
      }
    }
  }
  @keyframes find {
    0% {
      bottom: -100rpx;
    }
    50% {
      bottom: -50rpx;
    }
    100% {
      bottom: 0;
    }
  }
  .mask {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background:rgba(68,68,68,0.62);
    z-index: 22;
  }
</style>
<template>
  <view class="selectAddress" hidden="{{isShow}}">
    <view class="mask"></view>
    <view class="selectAddress-content">
      <view class="box">
        <view class="weui-flex center box-content">
          <view class="weui-flex__auto time-col-1">
            <view class="city-list">
              <repeat for="{{typeList}}" key="index" index="index" item="item">
                <view @tap="selectType({{index}}, {{item}})" class="item weui-flex center {{index==activeIndex?'item-active': '' }}">{{item}}</view>
              </repeat>
            </view>
          </view>
          <view class="weui-flex__auto time-col-2">
            <view class="city-list">
              <repeat for="{{array}}" key="index" index="index" item="item">
                <view @tap="selectTime({{index}}, {{item}})" class="{{timeIndex==index ? 'active': '' }}">{{item}}</view>
              </repeat>
            </view>
          </view>
        </view>
        <view class="box-btn weui-flex center">
           <button class="weui-flex__item btn weui-flex center" @tap="cancel">取消</button>
           <button class="weui-flex__item btn btn1 weui-flex center" @tap="save">确定</button>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import { $http } from '@/http.js'
import $moment from 'moment'
export default class selectTime extends wepy.component {
  props = {
    isShow: Boolean
  }
  data = {
    array: [],
    index: 0,
    addressText: '',
    option: [],
    typeList: [],
    activeIndex: 0,
    timeIndex: 0,
    nowTime: '',
    date: '',
    timeText: ''
  }
  onLoad() {
    this.array = this.getTimeList()
    this.nowTime = $moment().format('HH:mm')
    let hour = $moment().format('HH')
    if (Number(this.splitArr(this.nowTime))>=19&&Number(this.splitArr(this.nowTime), 1)>0) {
      this.typeList = ['明天']
      this.date = '08:00-09:00'
      this.timeText = '明天'
      this.changeTime('明天')
    } else {
      this.typeList = ['今天', '明天']
      this.date =this.add0(Number(hour)+ 1) + ':00' + '-' + this.add0(Number(hour)+ 2) + ':00'
      this.timeText = '今天'
      this.changeTime('今天')
    }
    this.$apply()
  }
  add0(num) {
    return num < 10 ? '0' + num : num
  }
  getTimeList() {
    let str
    let arr = []
    for (let i = 8 ; i < 20 ; i ++) {
      str = this.add0(i) + ':00-' + this.add0(i+1) + ':00'
      arr.push(str)
    }
    return arr
  }
  splitArr(str, index) {
    let i = index || 0
    return Number(str.split(':')[i])
  }
  getNewTimeList() {
    let arr = []
    this.array.forEach((item, index) => {
      let str = item.split('-')
      if (this.splitArr(this.nowTime) - this.splitArr(str[0]) >= 0 && this.splitArr(this.nowTime) - this.splitArr(str[1]) < 0) {
        arr = this.array.splice(index + 1, this.array.length - index)
      }
      if (this.splitArr(this.nowTime) - this.splitArr(str[0]) < 0) {
        arr = this.array
      }
    })
    return arr
  }
  changeTime(text) { 
    if (text == '今天') {
      this.array = this.getNewTimeList()
    } else {
      this.array = this.getTimeList()
    }
    this.date = this.array[0]
    this.$apply()
  }
  getNewDate(timeText, item) {
    let time = $moment().format('YYYY-MM-DD')
    let str = item.split('-')[1]
    let newTime = time + ' ' + str
    if (timeText == '明天') {
      newTime = $moment(newTime).add(1, 'days').format("YYYY-MM-DD HH:mm")
    }
    return $moment(newTime).unix()
  }
  methods = {
    save() {
      this.$emit('save', this.option)
    },
    cancel() {
      this.$emit('cancel')
    },
    selectType(index, item) {
     this.timeIndex = 0
     this.activeIndex = index
     this.timeText = item
     this.changeTime(item)
    },
    selectTime(index, item) {
      this.timeIndex = index
      this.date = item
      this.$apply()    
    },
    save() {
      let date = this.getNewDate(this.timeText, this.date)
      let params = {
        date,
        time: this.date,
        activeIndex: this.activeIndex,
        timeText: this.timeText
      }
      this.$emit('seletOrderTime', params)
    }
  }
}
</script>